import numpy as np
import json
from collections import OrderedDict
import pandas as pd
import argparse
from astropy import time
import astropy.units as u
from astropy.coordinates import Angle
import os

def all(file, snid, name):

    ra, dec = np.loadtxt(file,unpack=True,dtype=str, delimiter=",")
    ra = np.array([Angle(x, unit=u.deg).deg for x in ra[1:]])
    dec = np.array([Angle(x, unit=u.deg).deg for x in dec[1:]])

#    filt = ["i"] * len(ra)
#    texp = [140] * len(ra)
    filt = ["r"] * len(ra)
    texp = [60] * len(ra)
    field = [""] * len(ra)

    tiles(snid,[snid],ra,dec,filt,texp,[name],[snid],['object'],['GW-MMADS'],field)

def tiles(json_outpath,json_prefixs,pointRAs,pointDECs,filts,exps,propids,objects,exptypes,programs,fields):

    for json_prefix,pointRA,pointDEC,filt,exp,propid,tobject,exptype,program,field in zip(json_prefixs,pointRAs,pointDECs,filts,exps,objects,propids,exptypes,programs,fields):
        

        json_out = []
        cntr = 0
        lenobs = len(pointRAs)

        #print(lenobs)
        #print(filts)

        json_out.append('[')

        for i in range(lenobs):

                cntr += 1
                print(cntr)

                json_out.append('\t{') 
                json_out.append('\t\t"count": 1,')
                json_out.append('\t\t"filter": "%s",'% str(filts[i]))
                json_out.append('\t\t"exptime": %f,'% float(exps[i]))
                json_out.append('\t\t"RA": %f,' % round(float(pointRAs[i]), 5))
                json_out.append('\t\t"dec": %f,' % round(float(pointDECs[i]), 5))
                json_out.append('\t\t"object": "%s",'% (tobject + ' ' + str(fields[i])))
                json_out.append('\t\t"program": "%s",'%program)
                json_out.append('\t\t"expType": "%s",'%exptype)
                json_out.append('\t\t"note": "None",')
                json_out.append('\t\t"comment": "%s",'%json_prefix)
                json_out.append('\t\t"wait": "False",')
                json_out.append('\t\t"proposer": "Andreoni Palmese",')
                json_out.append('\t\t"propid": "%s"'%propid)

                if cntr == lenobs:
                    json_out.append('\t}')
                else:            
                    json_out.append('\t},')

    
    json_out.append(']')

    date = str(time.Time.now())[:10]

    cwd = os.getcwd() 

    os.system('mkdir -p '+tobject)

    os.chdir(cwd+'/'+tobject)

    os.system('mkdir -p '+date)
        
    outname = cwd+'/'+tobject+'/'+date+'/'+tobject+'_'+date+'_'+filt[0]+str(exps[0])+'.json'
    np.savetxt(outname, json_out, fmt='%s')

    print('wrote: '+outname)
    

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Wrapper to convert gwemopt output to DECam pointings json file.")
    parser.add_argument("file", help="Pointings file generated by gwemopt.",type=str)
    parser.add_argument("snid", help="DECam Program ID.",type=str)
    parser.add_argument("name", help="Name of GW event (and name of the json file: name.json)",type=str)

    args = parser.parse_args()

    #snid = '2022B-715089' #for BBH
    #snid = '2022B-922046' #for NS

    all(args.file, args.snid, args.name)


    #to run:
    #python gwemopt_to_json_DECam.py /Users/brendan/Documents/research/DECam/GWMMADS/JSONS/S230922g/09-23-23/S230922g_09-23-23_i.txt 2022B-922046 S230520ae






#
